{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _bemCx = require('./bemCx');\n\nvar _bemCx2 = _interopRequireDefault(_bemCx);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar BemMixin = {\n  propTypes: {\n    bemNamespace: _propTypes2.default.string,\n    bemBlock: _propTypes2.default.string\n  },\n  contextTypes: {\n    bemNamespace: _propTypes2.default.string,\n    bemBlock: _propTypes2.default.string\n  },\n  childContextTypes: {\n    bemNamespace: _propTypes2.default.string,\n    bemBlock: _propTypes2.default.string\n  },\n  getChildContext: function getChildContext() {\n    return {\n      bemNamespace: this.getBemNamespace(),\n      bemBlock: this.getBemBlock()\n    };\n  },\n  getBemNamespace: function getBemNamespace() {\n    if (this.props.bemNamespace) {\n      return this.props.bemNamespace;\n    }\n\n    if (this.context.bemNamespace) {\n      return this.context.bemNamespace;\n    }\n\n    return null;\n  },\n  getBemBlock: function getBemBlock() {\n    if (this.props.bemBlock) {\n      return this.props.bemBlock;\n    }\n\n    if (this.context.bemBlock) {\n      return this.context.bemBlock;\n    }\n\n    return null;\n  },\n  cx: function cx() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var opts = {\n      namespace: this.getBemNamespace(),\n      element: this.constructor.displayName,\n      block: this.getBemBlock()\n    };\n    Object.assign(opts, options);\n    return (0, _bemCx2.default)(opts);\n  }\n};\nexports.default = BemMixin;","map":null,"metadata":{},"sourceType":"script"}